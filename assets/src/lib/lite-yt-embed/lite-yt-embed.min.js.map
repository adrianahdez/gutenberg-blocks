{"version":3,"file":"js/lite-yt-embed.min.js","mappings":";;;;AAYA,MAAMA,UAAoBC,YACtB,iBAAAC,GACIC,KAAKC,QAAUD,KAAKE,aAAa,WAEjC,IAAIC,EAAYH,KAAKI,cAAc,gBAwBnC,GAtBAJ,KAAKK,UAAaF,GAAaA,EAAUG,YAAYC,QAAWP,KAAKE,aAAa,cAAgB,OAW7FF,KAAKQ,MAAMC,kBACdT,KAAKQ,MAAMC,gBAAkB,+BAA+BT,KAAKC,2BAI9DE,IACDA,EAAYO,SAASC,cAAc,UACnCR,EAAUS,KAAO,SACjBT,EAAUU,UAAUC,IAAI,eACxBd,KAAKe,OAAOZ,KAEXA,EAAUG,YAAa,CACxB,MAAMU,EAAiBN,SAASC,cAAc,QAC9CK,EAAeC,UAAY,sBAC3BD,EAAeV,YAAcN,KAAKK,UAClCF,EAAUY,OAAOC,EACrB,CACAb,EAAUe,gBAAgB,QAG1BlB,KAAKmB,iBAAiB,cAAetB,EAAYuB,gBAAiB,CAACC,MAAM,IAKzErB,KAAKmB,iBAAiB,QAASnB,KAAKsB,WAMpCtB,KAAKuB,sBAAwBC,UAAUC,OAAOC,SAAS,UAAYF,UAAUG,UAAUD,SAAS,OACpG,CAKA,kBAAOE,CAAYC,EAAMC,EAAKC,GAC1B,MAAMC,EAAStB,SAASC,cAAc,QACtCqB,EAAOC,IAAMJ,EACbG,EAAOE,KAAOJ,EACVC,IACAC,EAAOD,GAAKA,GAEhBrB,SAASyB,KAAKpB,OAAOiB,EACzB,CAWA,sBAAOZ,GACCvB,EAAYuC,eAGhBvC,EAAY+B,YAAY,aAAc,oCAEtC/B,EAAY+B,YAAY,aAAc,0BAGtC/B,EAAY+B,YAAY,aAAc,uCACtC/B,EAAY+B,YAAY,aAAc,kCAEtC/B,EAAYuC,cAAe,EAC/B,CAEA,gBAAAC,GACQC,OAAOC,IAAOD,OAAOC,IAAMD,OAAOC,GAAGC,SAEzCxC,KAAKyC,aAAe,IAAIC,SAAQ,CAACC,EAAKC,KAClC,IAAIC,EAAKnC,SAASC,cAAc,UAChCkC,EAAGC,IAAM,qCACTD,EAAGE,OAAQ,EACXF,EAAGG,OAASC,IACRV,GAAGW,MAAMP,EAAI,EAEjBE,EAAGM,QAAUP,EACb5C,KAAKe,OAAO8B,EAAG,IAEvB,CAEA,uBAAMO,CAAkBC,GACpBrD,KAAKqC,yBACCrC,KAAKyC,aAEX,MAAMa,EAAqB5C,SAASC,cAAc,OAClDX,KAAKe,OAAOuC,GAEZ,MAAMC,EAAYC,OAAOC,YAAYJ,EAAOK,WAE5C,IAAInB,GAAGC,OAAOc,EAAoB,CAC9BK,MAAO,OACP1D,QAASD,KAAKC,QACd2D,WAAYL,EACZM,OAAQ,CACJ,QAAWC,IACPA,EAAMC,OAAOC,WAAW,IAIxC,CAEA,eAAM1C,GACF,GAAItB,KAAKa,UAAUoD,SAAS,iBAAkB,OAC9CjE,KAAKa,UAAUC,IAAI,iBAEnB,MAAMuC,EAAS,IAAIa,gBAAgBlE,KAAKE,aAAa,WAAa,IAIlE,GAHAmD,EAAOtC,OAAO,WAAY,KAC1BsC,EAAOtC,OAAO,cAAe,KAEzBf,KAAKuB,sBACL,OAAOvB,KAAKoD,kBAAkBC,GAGlC,MAAMc,EAAWzD,SAASC,cAAc,UACxCwD,EAASR,MAAQ,IACjBQ,EAASC,OAAS,IAElBD,EAASE,MAAQrE,KAAKK,UACtB8D,EAASG,MAAQ,0EACjBH,EAASI,iBAAkB,EAG3BJ,EAASrB,IAAM,0CAA0C0B,mBAAmBxE,KAAKC,YAAYoD,EAAOoB,aACpGzE,KAAKe,OAAOoD,GAGZA,EAASO,OACb,EAGJC,eAAeC,OAAO,eAAgB/E,E","sources":["webpack://compi-prisa/./assets/src/js/lite-yt-embed.js"],"sourcesContent":["/**\r\n * A lightweight youtube embed. Still should feel the same to the user, just MUCH faster to initialize and paint.\r\n *\r\n * Thx to these as the inspiration\r\n *   https://storage.googleapis.com/amp-vs-non-amp/youtube-lazy.html\r\n *   https://autoplay-youtube-player.glitch.me/\r\n *\r\n * Once built it, I also found these:\r\n *   https://github.com/ampproject/amphtml/blob/master/extensions/amp-youtube (👍👍)\r\n *   https://github.com/Daugilas/lazyYT\r\n *   https://github.com/vb/lazyframe\r\n */\r\nclass LiteYTEmbed extends HTMLElement {\r\n    connectedCallback() {\r\n        this.videoId = this.getAttribute('videoid');\r\n\r\n        let playBtnEl = this.querySelector('.lty-playbtn');\r\n        // A label for the button takes priority over a [playlabel] attribute on the custom-element\r\n        this.playLabel = (playBtnEl && playBtnEl.textContent.trim()) || this.getAttribute('playlabel') || 'Play';\r\n\r\n        /**\r\n         * Lo, the youtube placeholder image!  (aka the thumbnail, poster image, etc)\r\n         *\r\n         * See https://github.com/paulirish/lite-youtube-embed/blob/master/youtube-thumbnail-urls.md\r\n         *\r\n         * TODO: Do the sddefault->hqdefault fallback\r\n         *       - When doing this, apply referrerpolicy (https://github.com/ampproject/amphtml/pull/3940)\r\n         * TODO: Consider using webp if supported, falling back to jpg\r\n         */\r\n        if (!this.style.backgroundImage) {\r\n          this.style.backgroundImage = `url(\"https://i.ytimg.com/vi/${this.videoId}/hqdefault.jpg\")`;\r\n        }\r\n\r\n        // Set up play button, and its visually hidden label\r\n        if (!playBtnEl) {\r\n            playBtnEl = document.createElement('button');\r\n            playBtnEl.type = 'button';\r\n            playBtnEl.classList.add('lty-playbtn');\r\n            this.append(playBtnEl);\r\n        }\r\n        if (!playBtnEl.textContent) {\r\n            const playBtnLabelEl = document.createElement('span');\r\n            playBtnLabelEl.className = 'lyt-visually-hidden';\r\n            playBtnLabelEl.textContent = this.playLabel;\r\n            playBtnEl.append(playBtnLabelEl);\r\n        }\r\n        playBtnEl.removeAttribute('href');\r\n\r\n        // On hover (or tap), warm up the TCP connections we're (likely) about to use.\r\n        this.addEventListener('pointerover', LiteYTEmbed.warmConnections, {once: true});\r\n\r\n        // Once the user clicks, add the real iframe and drop our play button\r\n        // TODO: In the future we could be like amp-youtube and silently swap in the iframe during idle time\r\n        //   We'd want to only do this for in-viewport or near-viewport ones: https://github.com/ampproject/amphtml/pull/5003\r\n        this.addEventListener('click', this.addIframe);\r\n\r\n        // Chrome & Edge desktop have no problem with the basic YouTube Embed with ?autoplay=1\r\n        // However Safari desktop and most/all mobile browsers do not successfully track the user gesture of clicking through the creation/loading of the iframe,\r\n        // so they don't autoplay automatically. Instead we must load an additional 2 sequential JS files (1KB + 165KB) (un-br) for the YT Player API\r\n        // TODO: Try loading the the YT API in parallel with our iframe and then attaching/playing it. #82\r\n        this.needsYTApiForAutoplay = navigator.vendor.includes('Apple') || navigator.userAgent.includes('Mobi');\r\n    }\r\n\r\n    /**\r\n     * Add a <link rel={preload | preconnect} ...> to the head\r\n     */\r\n    static addPrefetch(kind, url, as) {\r\n        const linkEl = document.createElement('link');\r\n        linkEl.rel = kind;\r\n        linkEl.href = url;\r\n        if (as) {\r\n            linkEl.as = as;\r\n        }\r\n        document.head.append(linkEl);\r\n    }\r\n\r\n    /**\r\n     * Begin pre-connecting to warm up the iframe load\r\n     * Since the embed's network requests load within its iframe,\r\n     *   preload/prefetch'ing them outside the iframe will only cause double-downloads.\r\n     * So, the best we can do is warm up a few connections to origins that are in the critical path.\r\n     *\r\n     * Maybe `<link rel=preload as=document>` would work, but it's unsupported: http://crbug.com/593267\r\n     * But TBH, I don't think it'll happen soon with Site Isolation and split caches adding serious complexity.\r\n     */\r\n    static warmConnections() {\r\n        if (LiteYTEmbed.preconnected) return;\r\n\r\n        // The iframe document and most of its subresources come right off youtube.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.youtube-nocookie.com');\r\n        // The botguard script is fetched off from google.com\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://www.google.com');\r\n\r\n        // Not certain if these ad related domains are in the critical path. Could verify with domain-specific throttling.\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://googleads.g.doubleclick.net');\r\n        LiteYTEmbed.addPrefetch('preconnect', 'https://static.doubleclick.net');\r\n\r\n        LiteYTEmbed.preconnected = true;\r\n    }\r\n\r\n    fetchYTPlayerApi() {\r\n        if (window.YT || (window.YT && window.YT.Player)) return;\r\n\r\n        this.ytApiPromise = new Promise((res, rej) => {\r\n            var el = document.createElement('script');\r\n            el.src = 'https://www.youtube.com/iframe_api';\r\n            el.async = true;\r\n            el.onload = _ => {\r\n                YT.ready(res);\r\n            };\r\n            el.onerror = rej;\r\n            this.append(el);\r\n        });\r\n    }\r\n\r\n    async addYTPlayerIframe(params) {\r\n        this.fetchYTPlayerApi();\r\n        await this.ytApiPromise;\r\n\r\n        const videoPlaceholderEl = document.createElement('div')\r\n        this.append(videoPlaceholderEl);\r\n\r\n        const paramsObj = Object.fromEntries(params.entries());\r\n\r\n        new YT.Player(videoPlaceholderEl, {\r\n            width: '100%',\r\n            videoId: this.videoId,\r\n            playerVars: paramsObj,\r\n            events: {\r\n                'onReady': event => {\r\n                    event.target.playVideo();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    async addIframe(){\r\n        if (this.classList.contains('lyt-activated')) return;\r\n        this.classList.add('lyt-activated');\r\n\r\n        const params = new URLSearchParams(this.getAttribute('params') || []);\r\n        params.append('autoplay', '1');\r\n        params.append('playsinline', '1');\r\n\r\n        if (this.needsYTApiForAutoplay) {\r\n            return this.addYTPlayerIframe(params);\r\n        }\r\n\r\n        const iframeEl = document.createElement('iframe');\r\n        iframeEl.width = 560;\r\n        iframeEl.height = 315;\r\n        // No encoding necessary as [title] is safe. https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html#:~:text=Safe%20HTML%20Attributes%20include\r\n        iframeEl.title = this.playLabel;\r\n        iframeEl.allow = 'accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture';\r\n        iframeEl.allowFullscreen = true;\r\n        // AFAIK, the encoding here isn't necessary for XSS, but we'll do it only because this is a URL\r\n        // https://stackoverflow.com/q/64959723/89484\r\n        iframeEl.src = `https://www.youtube-nocookie.com/embed/${encodeURIComponent(this.videoId)}?${params.toString()}`;\r\n        this.append(iframeEl);\r\n\r\n        // Set focus for a11y\r\n        iframeEl.focus();\r\n    }\r\n}\r\n// Register custom element\r\ncustomElements.define('lite-youtube', LiteYTEmbed);\r\n"],"names":["LiteYTEmbed","HTMLElement","connectedCallback","this","videoId","getAttribute","playBtnEl","querySelector","playLabel","textContent","trim","style","backgroundImage","document","createElement","type","classList","add","append","playBtnLabelEl","className","removeAttribute","addEventListener","warmConnections","once","addIframe","needsYTApiForAutoplay","navigator","vendor","includes","userAgent","addPrefetch","kind","url","as","linkEl","rel","href","head","preconnected","fetchYTPlayerApi","window","YT","Player","ytApiPromise","Promise","res","rej","el","src","async","onload","_","ready","onerror","addYTPlayerIframe","params","videoPlaceholderEl","paramsObj","Object","fromEntries","entries","width","playerVars","events","event","target","playVideo","contains","URLSearchParams","iframeEl","height","title","allow","allowFullscreen","encodeURIComponent","toString","focus","customElements","define"],"sourceRoot":""}